{"ast":null,"code":"\"use strict\";\n\nvar _db = _interopRequireDefault(require(\"../../../lib/db\"));\n\nvar _sqlTemplateStrings = _interopRequireDefault(require(\"sql-template-strings\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = async (req, res) => {\n  let page = parseInt(req.query.page) || 1;\n  const limit = parseInt(req.query.limit) || 9;\n  if (page < 1) page = 1;\n  const users = await _db.default.query((0, _sqlTemplateStrings.default)`\n      SELECT *\n      FROM users\n      ORDER BY id\n      LIMIT ${(page - 1) * limit}, ${limit}\n    `);\n  const count = await _db.default.query((0, _sqlTemplateStrings.default)`\n      SELECT COUNT(*)\n      AS usersCount\n      FROM users\n    `);\n  const {\n    usersCount\n  } = count[0];\n  const pageCount = Math.ceil(usersCount / limit);\n  res.status(200).json({\n    users,\n    pageCount,\n    page\n  });\n};","map":{"version":3,"sources":["/home/hnd/ws/learn/amplify/nextjs/next-mysql/pages/api/users/index.js"],"names":["module","exports","req","res","page","parseInt","query","limit","users","db","count","usersCount","pageCount","Math","ceil","status","json"],"mappings":";;AAAA;;AACA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,MAAIC,IAAI,GAAGC,QAAQ,CAACH,GAAG,CAACI,KAAJ,CAAUF,IAAX,CAAR,IAA4B,CAAvC;AACA,QAAMG,KAAK,GAAGF,QAAQ,CAACH,GAAG,CAACI,KAAJ,CAAUC,KAAX,CAAR,IAA6B,CAA3C;AACA,MAAIH,IAAI,GAAG,CAAX,EAAcA,IAAI,GAAG,CAAP;AACd,QAAMI,KAAK,GAAG,MAAMC,YAAGH,KAAH,CAAS,gCAAO;;;;cAIxB,CAACF,IAAI,GAAG,CAAR,IAAaG,KAAM,KAAIA,KAAM;KAJrB,CAApB;AAMA,QAAMG,KAAK,GAAG,MAAMD,YAAGH,KAAH,CAAS,gCAAO;;;;KAAhB,CAApB;AAKA,QAAM;AAAEK,IAAAA;AAAF,MAAiBD,KAAK,CAAC,CAAD,CAA5B;AACA,QAAME,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUH,UAAU,GAAGJ,KAAvB,CAAlB;AACAJ,EAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAER,IAAAA,KAAF;AAASI,IAAAA,SAAT;AAAoBR,IAAAA;AAApB,GAArB;AACD,CAlBD","sourcesContent":["import db from '../../../lib/db'\nimport escape from 'sql-template-strings'\n\nmodule.exports = async (req, res) => {\n  let page = parseInt(req.query.page) || 1\n  const limit = parseInt(req.query.limit) || 9\n  if (page < 1) page = 1\n  const users = await db.query(escape`\n      SELECT *\n      FROM users\n      ORDER BY id\n      LIMIT ${(page - 1) * limit}, ${limit}\n    `)\n  const count = await db.query(escape`\n      SELECT COUNT(*)\n      AS usersCount\n      FROM users\n    `)\n  const { usersCount } = count[0]\n  const pageCount = Math.ceil(usersCount / limit)\n  res.status(200).json({ users, pageCount, page })\n}\n"]},"metadata":{},"sourceType":"script"}